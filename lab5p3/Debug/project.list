
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b34  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000bf0  08000bf0  00010bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c18  08000c18  00010c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c1c  08000c1c  00010c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000c24  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000024  08000c24  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000ae3  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000002fa  00000000  00000000  00020b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000a8  00000000  00000000  00020e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000080  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000007a2  00000000  00000000  00020f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000631  00000000  00000000  000216da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  00021d0b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000198  00000000  00000000  00021d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000bd8 	.word	0x08000bd8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000bd8 	.word	0x08000bd8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b7f      	cmp	r3, #127	; 0x7f
 8000230:	d828      	bhi.n	8000284 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000232:	4a2f      	ldr	r2, [pc, #188]	; (80002f0 <__NVIC_SetPriority+0xd4>)
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b25b      	sxtb	r3, r3
 800023a:	089b      	lsrs	r3, r3, #2
 800023c:	33c0      	adds	r3, #192	; 0xc0
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	589b      	ldr	r3, [r3, r2]
 8000242:	1dfa      	adds	r2, r7, #7
 8000244:	7812      	ldrb	r2, [r2, #0]
 8000246:	0011      	movs	r1, r2
 8000248:	2203      	movs	r2, #3
 800024a:	400a      	ands	r2, r1
 800024c:	00d2      	lsls	r2, r2, #3
 800024e:	21ff      	movs	r1, #255	; 0xff
 8000250:	4091      	lsls	r1, r2
 8000252:	000a      	movs	r2, r1
 8000254:	43d2      	mvns	r2, r2
 8000256:	401a      	ands	r2, r3
 8000258:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	019b      	lsls	r3, r3, #6
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	401a      	ands	r2, r3
 8000262:	1dfb      	adds	r3, r7, #7
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	0018      	movs	r0, r3
 8000268:	2303      	movs	r3, #3
 800026a:	4003      	ands	r3, r0
 800026c:	00db      	lsls	r3, r3, #3
 800026e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000270:	481f      	ldr	r0, [pc, #124]	; (80002f0 <__NVIC_SetPriority+0xd4>)
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b25b      	sxtb	r3, r3
 8000278:	089b      	lsrs	r3, r3, #2
 800027a:	430a      	orrs	r2, r1
 800027c:	33c0      	adds	r3, #192	; 0xc0
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000282:	e031      	b.n	80002e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000284:	4a1b      	ldr	r2, [pc, #108]	; (80002f4 <__NVIC_SetPriority+0xd8>)
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	0019      	movs	r1, r3
 800028c:	230f      	movs	r3, #15
 800028e:	400b      	ands	r3, r1
 8000290:	3b08      	subs	r3, #8
 8000292:	089b      	lsrs	r3, r3, #2
 8000294:	3306      	adds	r3, #6
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	18d3      	adds	r3, r2, r3
 800029a:	3304      	adds	r3, #4
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	1dfa      	adds	r2, r7, #7
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	0011      	movs	r1, r2
 80002a4:	2203      	movs	r2, #3
 80002a6:	400a      	ands	r2, r1
 80002a8:	00d2      	lsls	r2, r2, #3
 80002aa:	21ff      	movs	r1, #255	; 0xff
 80002ac:	4091      	lsls	r1, r2
 80002ae:	000a      	movs	r2, r1
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	401a      	ands	r2, r3
 80002b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	019b      	lsls	r3, r3, #6
 80002ba:	22ff      	movs	r2, #255	; 0xff
 80002bc:	401a      	ands	r2, r3
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0018      	movs	r0, r3
 80002c4:	2303      	movs	r3, #3
 80002c6:	4003      	ands	r3, r0
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	4809      	ldr	r0, [pc, #36]	; (80002f4 <__NVIC_SetPriority+0xd8>)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	001c      	movs	r4, r3
 80002d4:	230f      	movs	r3, #15
 80002d6:	4023      	ands	r3, r4
 80002d8:	3b08      	subs	r3, #8
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	430a      	orrs	r2, r1
 80002de:	3306      	adds	r3, #6
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	18c3      	adds	r3, r0, r3
 80002e4:	3304      	adds	r3, #4
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b003      	add	sp, #12
 80002ee:	bd90      	pop	{r4, r7, pc}
 80002f0:	e000e100 	.word	0xe000e100
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	1e5a      	subs	r2, r3, #1
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	045b      	lsls	r3, r3, #17
 8000308:	429a      	cmp	r2, r3
 800030a:	d301      	bcc.n	8000310 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800030c:	2301      	movs	r3, #1
 800030e:	e010      	b.n	8000332 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <SysTick_Config+0x44>)
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	3a01      	subs	r2, #1
 8000316:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000318:	2301      	movs	r3, #1
 800031a:	425b      	negs	r3, r3
 800031c:	2103      	movs	r1, #3
 800031e:	0018      	movs	r0, r3
 8000320:	f7ff ff7c 	bl	800021c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <SysTick_Config+0x44>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <SysTick_Config+0x44>)
 800032c:	2207      	movs	r2, #7
 800032e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000330:	2300      	movs	r3, #0
}
 8000332:	0018      	movs	r0, r3
 8000334:	46bd      	mov	sp, r7
 8000336:	b002      	add	sp, #8
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	e000e010 	.word	0xe000e010

08000340 <delay_ms>:



volatile uint32_t count;

void delay_ms(uint32_t time){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	count = time;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <delay_ms+0x24>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
	while(count);
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <delay_ms+0x24>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d1fb      	bne.n	8000350 <delay_ms+0x10>
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	20000020 	.word	0x20000020

08000368 <SysTick_Handler>:

void SysTick_Handler(void){
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	if(count > 0)
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <SysTick_Handler+0x1c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d004      	beq.n	800037e <SysTick_Handler+0x16>
		count--;
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <SysTick_Handler+0x1c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	1e5a      	subs	r2, r3, #1
 800037a:	4b02      	ldr	r3, [pc, #8]	; (8000384 <SysTick_Handler+0x1c>)
 800037c:	601a      	str	r2, [r3, #0]
}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000020 	.word	0x20000020

08000388 <GPIO_Config>:

void GPIO_Config(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	 //Setup SSD pins as output
	    //GPIOA->MODER &= ~(3U << 0);
	    GPIOA->MODER &= ~(3U << 2*0);
 800038c:	23a0      	movs	r3, #160	; 0xa0
 800038e:	05db      	lsls	r3, r3, #23
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	23a0      	movs	r3, #160	; 0xa0
 8000394:	05db      	lsls	r3, r3, #23
 8000396:	2103      	movs	r1, #3
 8000398:	438a      	bics	r2, r1
 800039a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*1);
 800039c:	23a0      	movs	r3, #160	; 0xa0
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	23a0      	movs	r3, #160	; 0xa0
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	210c      	movs	r1, #12
 80003a8:	438a      	bics	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*4);
 80003ac:	23a0      	movs	r3, #160	; 0xa0
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	23a0      	movs	r3, #160	; 0xa0
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	495c      	ldr	r1, [pc, #368]	; (8000528 <GPIO_Config+0x1a0>)
 80003b8:	400a      	ands	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*5);
 80003bc:	23a0      	movs	r3, #160	; 0xa0
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	23a0      	movs	r3, #160	; 0xa0
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	4959      	ldr	r1, [pc, #356]	; (800052c <GPIO_Config+0x1a4>)
 80003c8:	400a      	ands	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*6);
 80003cc:	23a0      	movs	r3, #160	; 0xa0
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	23a0      	movs	r3, #160	; 0xa0
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	4956      	ldr	r1, [pc, #344]	; (8000530 <GPIO_Config+0x1a8>)
 80003d8:	400a      	ands	r2, r1
 80003da:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*7);
 80003dc:	23a0      	movs	r3, #160	; 0xa0
 80003de:	05db      	lsls	r3, r3, #23
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	23a0      	movs	r3, #160	; 0xa0
 80003e4:	05db      	lsls	r3, r3, #23
 80003e6:	4953      	ldr	r1, [pc, #332]	; (8000534 <GPIO_Config+0x1ac>)
 80003e8:	400a      	ands	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*8);
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	4950      	ldr	r1, [pc, #320]	; (8000538 <GPIO_Config+0x1b0>)
 80003f8:	400a      	ands	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*9);
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	23a0      	movs	r3, #160	; 0xa0
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	494d      	ldr	r1, [pc, #308]	; (800053c <GPIO_Config+0x1b4>)
 8000408:	400a      	ands	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*10);
 800040c:	23a0      	movs	r3, #160	; 0xa0
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	23a0      	movs	r3, #160	; 0xa0
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	494a      	ldr	r1, [pc, #296]	; (8000540 <GPIO_Config+0x1b8>)
 8000418:	400a      	ands	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*11);
 800041c:	23a0      	movs	r3, #160	; 0xa0
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	4947      	ldr	r1, [pc, #284]	; (8000544 <GPIO_Config+0x1bc>)
 8000428:	400a      	ands	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*12);
 800042c:	23a0      	movs	r3, #160	; 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	23a0      	movs	r3, #160	; 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	4944      	ldr	r1, [pc, #272]	; (8000548 <GPIO_Config+0x1c0>)
 8000438:	400a      	ands	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER &= ~(3U << 2*15);
 800043c:	23a0      	movs	r3, #160	; 0xa0
 800043e:	05db      	lsls	r3, r3, #23
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	23a0      	movs	r3, #160	; 0xa0
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	0092      	lsls	r2, r2, #2
 8000448:	0892      	lsrs	r2, r2, #2
 800044a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (0x1U << 2*0);
 800044c:	23a0      	movs	r3, #160	; 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	23a0      	movs	r3, #160	; 0xa0
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	2101      	movs	r1, #1
 8000458:	430a      	orrs	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*1);
 800045c:	23a0      	movs	r3, #160	; 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	23a0      	movs	r3, #160	; 0xa0
 8000464:	05db      	lsls	r3, r3, #23
 8000466:	2104      	movs	r1, #4
 8000468:	430a      	orrs	r2, r1
 800046a:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*4);
 800046c:	23a0      	movs	r3, #160	; 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	23a0      	movs	r3, #160	; 0xa0
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	0049      	lsls	r1, r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*5);
 800047e:	23a0      	movs	r3, #160	; 0xa0
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	23a0      	movs	r3, #160	; 0xa0
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	00c9      	lsls	r1, r1, #3
 800048c:	430a      	orrs	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*6);
 8000490:	23a0      	movs	r3, #160	; 0xa0
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	23a0      	movs	r3, #160	; 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0149      	lsls	r1, r1, #5
 800049e:	430a      	orrs	r2, r1
 80004a0:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*7);
 80004a2:	23a0      	movs	r3, #160	; 0xa0
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	23a0      	movs	r3, #160	; 0xa0
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	01c9      	lsls	r1, r1, #7
 80004b0:	430a      	orrs	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*8);
 80004b4:	23a0      	movs	r3, #160	; 0xa0
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	23a0      	movs	r3, #160	; 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	0249      	lsls	r1, r1, #9
 80004c2:	430a      	orrs	r2, r1
 80004c4:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*9);
 80004c6:	23a0      	movs	r3, #160	; 0xa0
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	23a0      	movs	r3, #160	; 0xa0
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	02c9      	lsls	r1, r1, #11
 80004d4:	430a      	orrs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*10);
 80004d8:	23a0      	movs	r3, #160	; 0xa0
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	23a0      	movs	r3, #160	; 0xa0
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2180      	movs	r1, #128	; 0x80
 80004e4:	0349      	lsls	r1, r1, #13
 80004e6:	430a      	orrs	r2, r1
 80004e8:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*11);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	23a0      	movs	r3, #160	; 0xa0
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	03c9      	lsls	r1, r1, #15
 80004f8:	430a      	orrs	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*12);
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	0449      	lsls	r1, r1, #17
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
	    GPIOA->MODER |= (1U << 2*15);
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	05c9      	lsls	r1, r1, #23
 800051c:	430a      	orrs	r2, r1
 800051e:	601a      	str	r2, [r3, #0]

}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	fffffcff 	.word	0xfffffcff
 800052c:	fffff3ff 	.word	0xfffff3ff
 8000530:	ffffcfff 	.word	0xffffcfff
 8000534:	ffff3fff 	.word	0xffff3fff
 8000538:	fffcffff 	.word	0xfffcffff
 800053c:	fff3ffff 	.word	0xfff3ffff
 8000540:	ffcfffff 	.word	0xffcfffff
 8000544:	ff3fffff 	.word	0xff3fffff
 8000548:	fcffffff 	.word	0xfcffffff

0800054c <CLK_Config>:

void CLK_Config(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	  /* Enable GPIOB and GPIOA clock */
	    RCC->IOPENR |= (1U);
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <CLK_Config+0x24>)
 8000552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <CLK_Config+0x24>)
 8000556:	2101      	movs	r1, #1
 8000558:	430a      	orrs	r2, r1
 800055a:	635a      	str	r2, [r3, #52]	; 0x34
	    RCC->IOPENR |= (1U << 1);
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <CLK_Config+0x24>)
 800055e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <CLK_Config+0x24>)
 8000562:	2102      	movs	r1, #2
 8000564:	430a      	orrs	r2, r1
 8000566:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000

08000574 <print_SSD>:
void print_SSD(uint8_t digit,uint8_t number){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	1c0a      	adds	r2, r1, #0
 8000584:	701a      	strb	r2, [r3, #0]

	switch(digit){
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b04      	cmp	r3, #4
 800058c:	d026      	beq.n	80005dc <print_SSD+0x68>
 800058e:	dc2f      	bgt.n	80005f0 <print_SSD+0x7c>
 8000590:	2b03      	cmp	r3, #3
 8000592:	d019      	beq.n	80005c8 <print_SSD+0x54>
 8000594:	dc2c      	bgt.n	80005f0 <print_SSD+0x7c>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d002      	beq.n	80005a0 <print_SSD+0x2c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d00a      	beq.n	80005b4 <print_SSD+0x40>
 800059e:	e027      	b.n	80005f0 <print_SSD+0x7c>
	case 1:
		GPIOA->ODR |= (1U << 10);
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	23a0      	movs	r3, #160	; 0xa0
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	00c9      	lsls	r1, r1, #3
 80005ae:	430a      	orrs	r2, r1
 80005b0:	615a      	str	r2, [r3, #20]
		break;
 80005b2:	e01d      	b.n	80005f0 <print_SSD+0x7c>
	case 2:
		GPIOA->ODR |= (1U << 11);
 80005b4:	23a0      	movs	r3, #160	; 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	23a0      	movs	r3, #160	; 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0109      	lsls	r1, r1, #4
 80005c2:	430a      	orrs	r2, r1
 80005c4:	615a      	str	r2, [r3, #20]
		break;
 80005c6:	e013      	b.n	80005f0 <print_SSD+0x7c>
	case 3:
		GPIOA->ODR |= (1U << 12);
 80005c8:	23a0      	movs	r3, #160	; 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	23a0      	movs	r3, #160	; 0xa0
 80005d0:	05db      	lsls	r3, r3, #23
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	0149      	lsls	r1, r1, #5
 80005d6:	430a      	orrs	r2, r1
 80005d8:	615a      	str	r2, [r3, #20]
		break;
 80005da:	e009      	b.n	80005f0 <print_SSD+0x7c>
	case 4:
		GPIOA->ODR |= (1U << 15);
 80005dc:	23a0      	movs	r3, #160	; 0xa0
 80005de:	05db      	lsls	r3, r3, #23
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	23a0      	movs	r3, #160	; 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	0209      	lsls	r1, r1, #8
 80005ea:	430a      	orrs	r2, r1
 80005ec:	615a      	str	r2, [r3, #20]
		break;
 80005ee:	46c0      	nop			; (mov r8, r8)
	}

	switch(number){
 80005f0:	1dbb      	adds	r3, r7, #6
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b09      	cmp	r3, #9
 80005f6:	d900      	bls.n	80005fa <print_SSD+0x86>
 80005f8:	e21d      	b.n	8000a36 <print_SSD+0x4c2>
 80005fa:	009a      	lsls	r2, r3, #2
 80005fc:	4bf3      	ldr	r3, [pc, #972]	; (80009cc <print_SSD+0x458>)
 80005fe:	18d3      	adds	r3, r2, r3
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	469f      	mov	pc, r3
	case 0:
		GPIOA->ODR |= (0U << 0);//A
 8000604:	23a0      	movs	r3, #160	; 0xa0
 8000606:	05da      	lsls	r2, r3, #23
 8000608:	23a0      	movs	r3, #160	; 0xa0
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	6952      	ldr	r2, [r2, #20]
 800060e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05da      	lsls	r2, r3, #23
 8000614:	23a0      	movs	r3, #160	; 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	6952      	ldr	r2, [r2, #20]
 800061a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05da      	lsls	r2, r3, #23
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	6952      	ldr	r2, [r2, #20]
 8000626:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 5);//D
 8000628:	23a0      	movs	r3, #160	; 0xa0
 800062a:	05da      	lsls	r2, r3, #23
 800062c:	23a0      	movs	r3, #160	; 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	6952      	ldr	r2, [r2, #20]
 8000632:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 6);//E
 8000634:	23a0      	movs	r3, #160	; 0xa0
 8000636:	05da      	lsls	r2, r3, #23
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	6952      	ldr	r2, [r2, #20]
 800063e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 7);//F
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05da      	lsls	r2, r3, #23
 8000644:	23a0      	movs	r3, #160	; 0xa0
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	6952      	ldr	r2, [r2, #20]
 800064a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 8);//G
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	23a0      	movs	r3, #160	; 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0049      	lsls	r1, r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05da      	lsls	r2, r3, #23
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	6952      	ldr	r2, [r2, #20]
 8000668:	615a      	str	r2, [r3, #20]
		break;
 800066a:	e227      	b.n	8000abc <print_SSD+0x548>
	case 1:
		GPIOA->ODR |= (1U << 0);//A
 800066c:	23a0      	movs	r3, #160	; 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	23a0      	movs	r3, #160	; 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2101      	movs	r1, #1
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05da      	lsls	r2, r3, #23
 8000680:	23a0      	movs	r3, #160	; 0xa0
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	6952      	ldr	r2, [r2, #20]
 8000686:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05da      	lsls	r2, r3, #23
 800068c:	23a0      	movs	r3, #160	; 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	6952      	ldr	r2, [r2, #20]
 8000692:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 5);//D
 8000694:	23a0      	movs	r3, #160	; 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	23a0      	movs	r3, #160	; 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2120      	movs	r1, #32
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);//E
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2140      	movs	r1, #64	; 0x40
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 7);//F
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	23a0      	movs	r3, #160	; 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	430a      	orrs	r2, r1
 80006c2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 8);//G
 80006c4:	23a0      	movs	r3, #160	; 0xa0
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	23a0      	movs	r3, #160	; 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	0049      	lsls	r1, r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 80006d6:	23a0      	movs	r3, #160	; 0xa0
 80006d8:	05da      	lsls	r2, r3, #23
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	6952      	ldr	r2, [r2, #20]
 80006e0:	615a      	str	r2, [r3, #20]
		break;
 80006e2:	e1eb      	b.n	8000abc <print_SSD+0x548>
	case 2:
		GPIOA->ODR |= (0U << 0);//A
 80006e4:	23a0      	movs	r3, #160	; 0xa0
 80006e6:	05da      	lsls	r2, r3, #23
 80006e8:	23a0      	movs	r3, #160	; 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	6952      	ldr	r2, [r2, #20]
 80006ee:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05da      	lsls	r2, r3, #23
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	6952      	ldr	r2, [r2, #20]
 80006fa:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 4);//C
 80006fc:	23a0      	movs	r3, #160	; 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2110      	movs	r1, #16
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 5);//D
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05da      	lsls	r2, r3, #23
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	6952      	ldr	r2, [r2, #20]
 8000716:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 6);//E
 8000718:	23a0      	movs	r3, #160	; 0xa0
 800071a:	05da      	lsls	r2, r3, #23
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	6952      	ldr	r2, [r2, #20]
 8000722:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 7);//F
 8000724:	23a0      	movs	r3, #160	; 0xa0
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	23a0      	movs	r3, #160	; 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	430a      	orrs	r2, r1
 8000732:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 8);//G
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05da      	lsls	r2, r3, #23
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	6952      	ldr	r2, [r2, #20]
 800073e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 8000740:	23a0      	movs	r3, #160	; 0xa0
 8000742:	05da      	lsls	r2, r3, #23
 8000744:	23a0      	movs	r3, #160	; 0xa0
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	6952      	ldr	r2, [r2, #20]
 800074a:	615a      	str	r2, [r3, #20]
		break;
 800074c:	e1b6      	b.n	8000abc <print_SSD+0x548>
	case 3:
		GPIOA->ODR |= (0U << 0);//A
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05da      	lsls	r2, r3, #23
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	6952      	ldr	r2, [r2, #20]
 8000758:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	05da      	lsls	r2, r3, #23
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	6952      	ldr	r2, [r2, #20]
 8000764:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05da      	lsls	r2, r3, #23
 800076a:	23a0      	movs	r3, #160	; 0xa0
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	6952      	ldr	r2, [r2, #20]
 8000770:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 5);//D
 8000772:	23a0      	movs	r3, #160	; 0xa0
 8000774:	05da      	lsls	r2, r3, #23
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	6952      	ldr	r2, [r2, #20]
 800077c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);//E
 800077e:	23a0      	movs	r3, #160	; 0xa0
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	23a0      	movs	r3, #160	; 0xa0
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2140      	movs	r1, #64	; 0x40
 800078a:	430a      	orrs	r2, r1
 800078c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 7);//F
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	23a0      	movs	r3, #160	; 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	430a      	orrs	r2, r1
 800079c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 8);//G
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05da      	lsls	r2, r3, #23
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	6952      	ldr	r2, [r2, #20]
 80007a8:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05da      	lsls	r2, r3, #23
 80007ae:	23a0      	movs	r3, #160	; 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	6952      	ldr	r2, [r2, #20]
 80007b4:	615a      	str	r2, [r3, #20]
		break;
 80007b6:	e181      	b.n	8000abc <print_SSD+0x548>
	case 4:
		GPIOA->ODR |= (1U << 0);//A
 80007b8:	23a0      	movs	r3, #160	; 0xa0
 80007ba:	05db      	lsls	r3, r3, #23
 80007bc:	695a      	ldr	r2, [r3, #20]
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2101      	movs	r1, #1
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 80007c8:	23a0      	movs	r3, #160	; 0xa0
 80007ca:	05da      	lsls	r2, r3, #23
 80007cc:	23a0      	movs	r3, #160	; 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	6952      	ldr	r2, [r2, #20]
 80007d2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05da      	lsls	r2, r3, #23
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	6952      	ldr	r2, [r2, #20]
 80007de:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 5);//D
 80007e0:	23a0      	movs	r3, #160	; 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	695a      	ldr	r2, [r3, #20]
 80007e6:	23a0      	movs	r3, #160	; 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2120      	movs	r1, #32
 80007ec:	430a      	orrs	r2, r1
 80007ee:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);//E
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 7);//F
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	05da      	lsls	r2, r3, #23
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	6952      	ldr	r2, [r2, #20]
 800080a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 8);//G
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05da      	lsls	r2, r3, #23
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	6952      	ldr	r2, [r2, #20]
 8000816:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05da      	lsls	r2, r3, #23
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	6952      	ldr	r2, [r2, #20]
 8000822:	615a      	str	r2, [r3, #20]
		break;
 8000824:	e14a      	b.n	8000abc <print_SSD+0x548>
	case 5:
		GPIOA->ODR |= (0U << 0);//A
 8000826:	23a0      	movs	r3, #160	; 0xa0
 8000828:	05da      	lsls	r2, r3, #23
 800082a:	23a0      	movs	r3, #160	; 0xa0
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	6952      	ldr	r2, [r2, #20]
 8000830:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);//B
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2102      	movs	r1, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05da      	lsls	r2, r3, #23
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	6952      	ldr	r2, [r2, #20]
 800084c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 5);//D
 800084e:	23a0      	movs	r3, #160	; 0xa0
 8000850:	05da      	lsls	r2, r3, #23
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	6952      	ldr	r2, [r2, #20]
 8000858:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);//E
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	23a0      	movs	r3, #160	; 0xa0
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	430a      	orrs	r2, r1
 8000868:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 7);//F
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05da      	lsls	r2, r3, #23
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	6952      	ldr	r2, [r2, #20]
 8000874:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 8);//G
 8000876:	23a0      	movs	r3, #160	; 0xa0
 8000878:	05da      	lsls	r2, r3, #23
 800087a:	23a0      	movs	r3, #160	; 0xa0
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	6952      	ldr	r2, [r2, #20]
 8000880:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05da      	lsls	r2, r3, #23
 8000886:	23a0      	movs	r3, #160	; 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	6952      	ldr	r2, [r2, #20]
 800088c:	615a      	str	r2, [r3, #20]
		break;
 800088e:	e115      	b.n	8000abc <print_SSD+0x548>
	case 6:
		GPIOA->ODR |= (0U << 0);//A
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05da      	lsls	r2, r3, #23
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	6952      	ldr	r2, [r2, #20]
 800089a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);//B
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2102      	movs	r1, #2
 80008a8:	430a      	orrs	r2, r1
 80008aa:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05da      	lsls	r2, r3, #23
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	6952      	ldr	r2, [r2, #20]
 80008b6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 5);//D
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05da      	lsls	r2, r3, #23
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	6952      	ldr	r2, [r2, #20]
 80008c2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 6);//E
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05da      	lsls	r2, r3, #23
 80008c8:	23a0      	movs	r3, #160	; 0xa0
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	6952      	ldr	r2, [r2, #20]
 80008ce:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 7);//F
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05da      	lsls	r2, r3, #23
 80008d4:	23a0      	movs	r3, #160	; 0xa0
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	6952      	ldr	r2, [r2, #20]
 80008da:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 8);//G
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05da      	lsls	r2, r3, #23
 80008e0:	23a0      	movs	r3, #160	; 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	6952      	ldr	r2, [r2, #20]
 80008e6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 80008e8:	23a0      	movs	r3, #160	; 0xa0
 80008ea:	05da      	lsls	r2, r3, #23
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	6952      	ldr	r2, [r2, #20]
 80008f2:	615a      	str	r2, [r3, #20]
		break;
 80008f4:	e0e2      	b.n	8000abc <print_SSD+0x548>
	case 7:
		GPIOA->ODR |= (0U << 0);//A
 80008f6:	23a0      	movs	r3, #160	; 0xa0
 80008f8:	05da      	lsls	r2, r3, #23
 80008fa:	23a0      	movs	r3, #160	; 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	6952      	ldr	r2, [r2, #20]
 8000900:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05da      	lsls	r2, r3, #23
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	6952      	ldr	r2, [r2, #20]
 800090c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05da      	lsls	r2, r3, #23
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	6952      	ldr	r2, [r2, #20]
 8000918:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 5);//D
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2120      	movs	r1, #32
 8000926:	430a      	orrs	r2, r1
 8000928:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);//E
 800092a:	23a0      	movs	r3, #160	; 0xa0
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	23a0      	movs	r3, #160	; 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	430a      	orrs	r2, r1
 8000938:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 7);//F
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	23a0      	movs	r3, #160	; 0xa0
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	430a      	orrs	r2, r1
 8000948:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 8);//G
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	23a0      	movs	r3, #160	; 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0049      	lsls	r1, r1, #1
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 800095c:	23a0      	movs	r3, #160	; 0xa0
 800095e:	05da      	lsls	r2, r3, #23
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	6952      	ldr	r2, [r2, #20]
 8000966:	615a      	str	r2, [r3, #20]
		break;
 8000968:	e0a8      	b.n	8000abc <print_SSD+0x548>
	case 8:
		GPIOA->ODR |= (0U << 0);//A
 800096a:	23a0      	movs	r3, #160	; 0xa0
 800096c:	05da      	lsls	r2, r3, #23
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	6952      	ldr	r2, [r2, #20]
 8000974:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 8000976:	23a0      	movs	r3, #160	; 0xa0
 8000978:	05da      	lsls	r2, r3, #23
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	6952      	ldr	r2, [r2, #20]
 8000980:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05da      	lsls	r2, r3, #23
 8000986:	23a0      	movs	r3, #160	; 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	6952      	ldr	r2, [r2, #20]
 800098c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 5);//D
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	05da      	lsls	r2, r3, #23
 8000992:	23a0      	movs	r3, #160	; 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	6952      	ldr	r2, [r2, #20]
 8000998:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 6);//E
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05da      	lsls	r2, r3, #23
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	6952      	ldr	r2, [r2, #20]
 80009a4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 7);//F
 80009a6:	23a0      	movs	r3, #160	; 0xa0
 80009a8:	05da      	lsls	r2, r3, #23
 80009aa:	23a0      	movs	r3, #160	; 0xa0
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	6952      	ldr	r2, [r2, #20]
 80009b0:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 8);//G
 80009b2:	23a0      	movs	r3, #160	; 0xa0
 80009b4:	05da      	lsls	r2, r3, #23
 80009b6:	23a0      	movs	r3, #160	; 0xa0
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	6952      	ldr	r2, [r2, #20]
 80009bc:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05da      	lsls	r2, r3, #23
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	6952      	ldr	r2, [r2, #20]
 80009c8:	615a      	str	r2, [r3, #20]
		break;
 80009ca:	e077      	b.n	8000abc <print_SSD+0x548>
 80009cc:	08000bf0 	.word	0x08000bf0
	case 9:
		GPIOA->ODR |= (0U << 0);//A
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05da      	lsls	r2, r3, #23
 80009d4:	23a0      	movs	r3, #160	; 0xa0
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	6952      	ldr	r2, [r2, #20]
 80009da:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 1);//B
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	05da      	lsls	r2, r3, #23
 80009e0:	23a0      	movs	r3, #160	; 0xa0
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	6952      	ldr	r2, [r2, #20]
 80009e6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 4);//C
 80009e8:	23a0      	movs	r3, #160	; 0xa0
 80009ea:	05da      	lsls	r2, r3, #23
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	6952      	ldr	r2, [r2, #20]
 80009f2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 5);//D
 80009f4:	23a0      	movs	r3, #160	; 0xa0
 80009f6:	05da      	lsls	r2, r3, #23
 80009f8:	23a0      	movs	r3, #160	; 0xa0
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	6952      	ldr	r2, [r2, #20]
 80009fe:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);//E
 8000a00:	23a0      	movs	r3, #160	; 0xa0
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	23a0      	movs	r3, #160	; 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 7);//F
 8000a10:	23a0      	movs	r3, #160	; 0xa0
 8000a12:	05da      	lsls	r2, r3, #23
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	6952      	ldr	r2, [r2, #20]
 8000a1a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 8);//G
 8000a1c:	23a0      	movs	r3, #160	; 0xa0
 8000a1e:	05da      	lsls	r2, r3, #23
 8000a20:	23a0      	movs	r3, #160	; 0xa0
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	6952      	ldr	r2, [r2, #20]
 8000a26:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (0U << 9);//DOT
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05da      	lsls	r2, r3, #23
 8000a2c:	23a0      	movs	r3, #160	; 0xa0
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	6952      	ldr	r2, [r2, #20]
 8000a32:	615a      	str	r2, [r3, #20]
		break;
 8000a34:	e042      	b.n	8000abc <print_SSD+0x548>
	default:
		GPIOA->ODR |= (1U << 0);//A
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	695a      	ldr	r2, [r3, #20]
 8000a3c:	23a0      	movs	r3, #160	; 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 1);//B
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	23a0      	movs	r3, #160	; 0xa0
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	2102      	movs	r1, #2
 8000a52:	430a      	orrs	r2, r1
 8000a54:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 4);//C
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	695a      	ldr	r2, [r3, #20]
 8000a5c:	23a0      	movs	r3, #160	; 0xa0
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	2110      	movs	r1, #16
 8000a62:	430a      	orrs	r2, r1
 8000a64:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 5);//D
 8000a66:	23a0      	movs	r3, #160	; 0xa0
 8000a68:	05db      	lsls	r3, r3, #23
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	23a0      	movs	r3, #160	; 0xa0
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	2120      	movs	r1, #32
 8000a72:	430a      	orrs	r2, r1
 8000a74:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 6);//E
 8000a76:	23a0      	movs	r3, #160	; 0xa0
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	695a      	ldr	r2, [r3, #20]
 8000a7c:	23a0      	movs	r3, #160	; 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	2140      	movs	r1, #64	; 0x40
 8000a82:	430a      	orrs	r2, r1
 8000a84:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 7);//F
 8000a86:	23a0      	movs	r3, #160	; 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	430a      	orrs	r2, r1
 8000a94:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 8);//G
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	0049      	lsls	r1, r1, #1
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= (1U << 9);//DOT
 8000aa8:	23a0      	movs	r3, #160	; 0xa0
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	23a0      	movs	r3, #160	; 0xa0
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0089      	lsls	r1, r1, #2
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	615a      	str	r2, [r3, #20]
	}
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <main>:
int main(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 100000);
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <main+0x58>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4914      	ldr	r1, [pc, #80]	; (8000b20 <main+0x5c>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fb18 	bl	8000104 <__udivsi3>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f7ff fc0e 	bl	80002f8 <SysTick_Config>
	CLK_Config();
 8000adc:	f7ff fd36 	bl	800054c <CLK_Config>
	GPIO_Config();
 8000ae0:	f7ff fc52 	bl	8000388 <GPIO_Config>
	GPIOA->ODR &= ~(0xFFFFU);
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0c12      	lsrs	r2, r2, #16
 8000af0:	0412      	lsls	r2, r2, #16
 8000af2:	615a      	str	r2, [r3, #20]

    while(1) {
    	print_SSD(4,3);
 8000af4:	2103      	movs	r1, #3
 8000af6:	2004      	movs	r0, #4
 8000af8:	f7ff fd3c 	bl	8000574 <print_SSD>
    	delay_ms(1000);
 8000afc:	23fa      	movs	r3, #250	; 0xfa
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fc1d 	bl	8000340 <delay_ms>
    	print_SSD(4,5);
 8000b06:	2105      	movs	r1, #5
 8000b08:	2004      	movs	r0, #4
 8000b0a:	f7ff fd33 	bl	8000574 <print_SSD>
    	delay_ms(1000);
 8000b0e:	23fa      	movs	r3, #250	; 0xfa
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fc14 	bl	8000340 <delay_ms>
    	print_SSD(4,3);
 8000b18:	e7ec      	b.n	8000af4 <main+0x30>
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b26:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b28:	f000 f826 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopForever+0xe>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopForever+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b52:	f000 f81d 	bl	8000b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b56:	f7ff ffb5 	bl	8000ac4 <main>

08000b5a <LoopForever>:

LoopForever:
    b LoopForever
 8000b5a:	e7fe      	b.n	8000b5a <LoopForever>
  ldr   r0, =_estack
 8000b5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b68:	08000c20 	.word	0x08000c20
  ldr r2, =_sbss
 8000b6c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b70:	20000024 	.word	0x20000024

08000b74 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC_COMP_IRQHandler>
	...

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <SystemInit+0x14>)
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	0512      	lsls	r2, r2, #20
 8000b82:	609a      	str	r2, [r3, #8]
#endif
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__libc_init_array>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	2600      	movs	r6, #0
 8000b94:	4d0c      	ldr	r5, [pc, #48]	; (8000bc8 <__libc_init_array+0x38>)
 8000b96:	4c0d      	ldr	r4, [pc, #52]	; (8000bcc <__libc_init_array+0x3c>)
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	10a4      	asrs	r4, r4, #2
 8000b9c:	42a6      	cmp	r6, r4
 8000b9e:	d109      	bne.n	8000bb4 <__libc_init_array+0x24>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	f000 f819 	bl	8000bd8 <_init>
 8000ba6:	4d0a      	ldr	r5, [pc, #40]	; (8000bd0 <__libc_init_array+0x40>)
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <__libc_init_array+0x44>)
 8000baa:	1b64      	subs	r4, r4, r5
 8000bac:	10a4      	asrs	r4, r4, #2
 8000bae:	42a6      	cmp	r6, r4
 8000bb0:	d105      	bne.n	8000bbe <__libc_init_array+0x2e>
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	00b3      	lsls	r3, r6, #2
 8000bb6:	58eb      	ldr	r3, [r5, r3]
 8000bb8:	4798      	blx	r3
 8000bba:	3601      	adds	r6, #1
 8000bbc:	e7ee      	b.n	8000b9c <__libc_init_array+0xc>
 8000bbe:	00b3      	lsls	r3, r6, #2
 8000bc0:	58eb      	ldr	r3, [r5, r3]
 8000bc2:	4798      	blx	r3
 8000bc4:	3601      	adds	r6, #1
 8000bc6:	e7f2      	b.n	8000bae <__libc_init_array+0x1e>
 8000bc8:	08000c18 	.word	0x08000c18
 8000bcc:	08000c18 	.word	0x08000c18
 8000bd0:	08000c18 	.word	0x08000c18
 8000bd4:	08000c1c 	.word	0x08000c1c

08000bd8 <_init>:
 8000bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bde:	bc08      	pop	{r3}
 8000be0:	469e      	mov	lr, r3
 8000be2:	4770      	bx	lr

08000be4 <_fini>:
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bea:	bc08      	pop	{r3}
 8000bec:	469e      	mov	lr, r3
 8000bee:	4770      	bx	lr
